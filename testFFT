# -*- coding: utf-8 -*-
"""
Created on Wed Jan 11 21:48:15 2017

@author: Ronkin
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import sys
import MyLIB as mL
import TestFitzRest


def MySCFDest(s_in, fs, Wcof, CutCof, mod):
    N = len(s_in)
    Wfilt = np.zeros(2)
    fCorse = mL.Ml_est(s_in, fs, 2 * N)
    Wfilt[0] = fCorse * Wcof[0]
    Wfilt[1] = fCorse * Wcof[1]
    s_c = mL.MyFilter3(s_in, Wfilt, fs)
    s_c = s_c[CutCof[0]: N - CutCof[1]]
    f_est = mL.SCFD_est(s_c, fs, mod)
    return f_est


##############################
def main():
    print '   M A I N   '

    '''

    CutCof = np.array([])
    Wcof   = np.array([])
    N0     = 512     # к-во точек сигнала
    #n=np.arange(0,N0);   # массив отсчетов
    fs     = 20E3    # частота дискретизации
    f      = 1e3#1.532E3  # частота сигнала
    cutL   = 0.8 # нижняя частота дискретизации
    cutH   = 1.2 # верхняя частота дискретизации
    fp     = 10      # к-во точек обрезки в начале
    lp     = 10      # к-во точек обрезки в конце
    Wcof   = [cutL, cutH]
    CutCof = [fp  , lp  ]
    s      = [np.sin((2*np.pi*n*f/fs)) for n in np.arange(0,N0)] # формирование сигнала

    fSCFD  = MySCFDest(s,fs,Wcof,CutCof,'FullTestHard')
    #fFitzR = TestFitzRest.MyFitzREst
    (spectr,fres,datafilt)=TestFitzRest.MyFitzREst(s,fs,Wcof,CutCof)

    #plt.figure(1)
    print fSCFD

    '''
    fs = float(20e3)
    f = 10
    N = 512
    ff = [n * fs / N for n in range(0, N)]
    Wfilt = [868.153100253,1631.81248159]
    # ======================ОКНО ВЫРЕЗА============================================

    fp = int((Wfilt[0] / fs) * N)  # вычисление отсчета спектра
    # соответствующего нижней частоте среза
    lp = int((Wfilt[1] / fs) * N)  # вычисление отсчета спектра
    # соответствующего верхней частоте среза
    if lp > N / 2:  # проверка на ограничение верхней частоты
        lp = int(N / 2)  # не должна превышать половину длины спектра (fs/2)
    One = np.ones(lp - fp);  # расчет массива единичной ступеньки
    z2 = np.zeros(N - lp);  # расчет массива нулей после ступеньки
    if Wfilt[0] == 0:  # проверка на ФНЧ
        Hp = np.hstack((2 * One,
                        z2));  # расчет спектра импульсный функции фильтра              # если ФНЧ то нулей перед ступенькой нет
    else:
        z1 = np.zeros(fp);  # расчет массива нулей до ступеньки
        Hp = np.hstack((z1, 2 * One, z2));
    #==================================================================

    s =[11.962223053,93.334293366,24.852848053,51.4397621155,167.455387116,-75.8551597595,-252.295589447,-286.133480072,-214.42937851,-125.806331634,-7.37371444703,213.378238678,329.393863678,133.61749649,-52.490901947,198.876285553,82.05499649,127.977848053,-4.15105819703,-158.032894134,-48.4625816345,-152.393245697,-74.2438316345,66.747379303,95.751285553,236.74249649,190.013980866,-154.004573822,-415.845394134,-492.383480072,-3.34539413453,270.580387116,339.061832428,-117.74969101,-50.879573822,-58.936214447,6.32257461547,-0.122737884529,-143.53094101,-197.510433197,-55.713558197,26.464176178,277.831363678,518.724918366,355.175113678,106.224918366,-96.8024253845,-281.299495697,-313.526058197,-113.721370697,134.423160553,278.63702774,344.701480866,204.51593399,-117.74969101,-224.09734726,-90.3571128845,-198.31609726,-73.438167572,-147.559261322,-448.071956634,-299.829769134,242.382144928,304.41827774,196.459293366,-19.4586753845,-313.526058197,-277.271175384,-63.770198822,151.342105866,351.146793366,418.822574616,495.360660553,111.864566803,-238.599300384,-357.837581634,-180.591487884,294.75030899,285.08234024,163.427066803,-344.141292572,-50.879573822,202.098941803,217.40655899,35.3264808655,-214.42937851,-365.088558197,-440.01531601,-247.461605072,-22.6813316345,210.155582428,9.54523086547,248.021793366,20.018863678,-50.879573822,-137.08562851,-214.42937851,-2.53973007203,47.411441803,139.257144928,-13.819026947,9.54523086547,159.39874649,430.907535553,289.110660553,220.62921524,-120.97234726,-277.271175384,-93.5797691345,172.28937149,148.925113678,-62.9645347595,-110.498714447,-392.481136322,-155.615901947,256.884098053,-1.73406600953,-115.332698822,-411.817073822,-187.842464447,30.4924964905,299.584293366,359.20343399,87.694644928,-13.0133628845,-231.348323822,-328.833675384,-242.627620697,-25.098323822,149.73077774,281.054019928,315.697574616,173.095035553,176.317691803,319.725894928,335.033512116,-1.73406600953,-307.88640976,-547.974300384,-438.403987884,-33.9606285095,169.872379303,210.155582428,343.09015274,11.1565589905,-97.608089447,-104.053401947,-82.3004722595,-297.412776947,-319.165706634,-416.651058197,-93.5797691345,-19.4586753845,88.50030899,318.114566803,393.846988678,389.818668366,254.467105866,6.32257461547,40.966129303,41.7717933655,137.645816803,-151.587581634,-311.914730072,-305.469417572,-414.23406601,-185.42547226,198.07062149,406.737613678,422.045230866,248.827457428,55.468082428,-138.696956634,-303.052425384,-263.574886322,-437.598323822,-252.295589447,-103.247737885,61.913394928,345.507144928,387.401676178,239.96515274,338.256168366,339.061832428,-33.9606285095,-196.704769134,-390.869808197,-350.586605072,-279.688167572,-145.142269134,23.241519928,194.84796524,264.135074616,393.846988678,242.382144928,213.378238678,22.4358558655,-224.09734726,-371.533870697,-386.841487884,-361.865901947,-200.733089447,65.136051178,221.434879303,391.42999649,361.620426178,360.814762116,86.888980866,-58.1305503845,-145.947933197,-442.432308197,-388.45281601,-239.404964447,-199.927425384,16.796207428,326.171207428,421.239566803,427.684879303,-29.1266441345,-10.596370697,86.888980866,79.638004303,-112.915706635,-394.092464447,-282.10515976,-137.891292572,60.302066803,177.929019928,227.07452774,298.778629303,173.095035553,103.807926178,-72.6325035095,-120.166683197,-199.927425384,-239.404964447,-188.64812851,-245.044612884,-176.563167572,-79.0778160095,121.532535553,256.07843399,408.348941803,173.900699616,65.9417152405,-212.818050384,-62.158870697,-17.041683197,65.136051178,65.136051178,-84.717464447,-25.098323822,-58.1305503845,34.520816803,133.61749649,57.8850746155,-100.830745697,-42.0172691345,-196.704769134,-228.931331634,-94.385433197,-33.154964447,268.163394928,38.5491371155,40.1604652405,87.694644928,51.4397621155,1.48859024047,27.2698402405,200.487613678,148.119449616,24.852848053,-187.036800384,-340.11297226,-311.10906601,-149.97625351,-122.583675385,190.819644928,387.401676178,423.65655899,132.811832428,-38.7946128845,-225.708675384,-350.586605072,-69.4098472595,163.427066803,93.334293366,-62.158870697,-57.324886322,27.2698402405,28.075504303,121.532535553,95.751285553,-37.1832847595,-300.635433197,-252.295589447,-76.660823822,53.0510902405,302.001285553,355.98077774,216.600894928,87.694644928,-72.6325035095,-163.672542572,24.0471839905,20.8245277405,122.338199616,-126.611995697,-278.88250351,-304.66375351,-106.470394135,220.62921524,272.19171524,-29.932308197,-46.8512535095,-323.99969101,-360.254573822,-110.498714447,179.540348053,422.850894928,511.473941803,281.054019928,20.8245277405,-199.121761322,-187.036800384,-21.0700035095,34.520816803,40.1604652405,-61.3532066345,-107.276058197,-162.86687851,-155.615901947,-10.596370697,-37.1832847595,-8.17937850953,43.3831214905,32.1038246155,-152.393245697,-76.660823822,-122.583675385,-2.53973007203,224.657535553,416.405582428,455.88312149,312.474918366,99.779605866,-60.547542572,-207.98406601,-286.133480072,-132.251644134,-187.842464447,-242.627620697,72.3870277405,91.72296524,1.48859024047,-183.008480072,-279.688167572,-292.578792572,-167.700862884,78.026676178,201.29327774,339.86749649,366.454410553,438.158512116,257.689762116,284.276676178,83.666324616,63.524723053,-116.138362885,-264.380550384,-415.845394134,-515.747737884,-449.68328476,-200.733089447,216.600894928,471.99640274,380.956363678,96.556949616,-158.032894134,-253.906917572,-296.607112884,-212.012386322,3.90558242797,255.272769928,285.08234024,174.706363678,96.556949616,174.706363678,228.685855866,203.710269928,125.560855866,-31.543636322,-195.09344101,-361.865901947,-404.56609726,-406.983089447,-276.465511322,-72.6325035095,193.236637116,447.020816803,265.74640274,135.228824616,-120.166683197,-79.0778160095,-213.623714447,-133.057308197,-4.15105819703,134.423160553,288.30499649,334.227848053,294.75030899,15.184879303,11.962223053,61.913394928,-4.15105819703,-70.215511322,-90.3571128845,-247.461605072,-295.801448822,-377.173519134,-298.21844101,-249.072933197,-91.9684410095,161.010074616,422.045230866,331.810855866,3.09991836547,57.8850746155,-143.53094101,8.73956680297,-14.6246910095,161.815738678,185.985660553,288.30499649,-16.2360191345,-84.717464447,136.84015274,210.96124649,156.17609024,-25.9039878845,-188.64812851,-335.278987884,-324.805355072,-155.615901947,-77.4664878845,-88.7457847595,-170.923519134,-56.5192222595,107.83624649,68.358707428,179.540348053,200.487613678,78.83234024,-81.494808197,-98.4137535095,-116.138362885,-92.774105072,-132.251644134,-128.223323822,-48.4625816345,3.09991836547,142.479801178,290.721988678,364.843082428,380.956363678,407.54327774,246.41046524,-87.1344566345,-190.259456634,-411.817073822,-321.582698822,-284.522151947,-165.283870697,219.017887116,150.536441803,85.27765274,-25.9039878845,-170.117855072,-186.231136322,-216.040706634,-294.99578476,-179.785823822,-125.000667572,-30.7379722595,127.977848053,235.936832428,360.009098053,426.073551178,335.033512116,358.397769928,182.763004303,-25.098323822,-224.09734726,-181.397151947,-298.21844101,-301.44109726,-29.1266441345,156.17609024,154.564762116,136.84015274,87.694644928,-55.713558197,-135.474300384,-193.482112884,-269.21453476,-326.416683197,-177.368831634,-87.1344566345,-172.53484726,-170.117855072,24.0471839905,402.709293366]
    SP1 = np.fft.fft(s)
    SP1 = SP1 * Hp[0:N]
    SP_a1 = np.abs(SP1)

    pp = np.flatnonzero(SP_a1 == max(SP_a1))[0]  # поиск первого максимума
    fff = fs * (pp) / N  # расчет частоты первого максимума

    print 'freq      = ' + str(fff)
    print 'position  = ' + str(pp)
    print 'freq step = ' + str(fs * 1 / N)

    fRange = [1484.375, 1640.625];
    # ======================ОКНО ВЫРЕЗА============================================
    N2 = 512
    fp2 = int((fRange[0]/fs)*N2)  # вычисление отсчета спектра
    # соответствующего нижней частоте среза
    lp2 = int((fRange[1]/fs)*N2)  # вычисление отсчета спектра
    # соответствующего верхней частоте среза
    if lp2 > N2 / 2:  # проверка на ограничение верхней частоты
        lp2 = int(N2 / 2)  # не должна превышать половину длины спектра (fs/2)
    One = np.ones(lp2 - fp2);  # расчет массива единичной ступеньки
    z22 = np.zeros(N2 - lp2);  # расчет массива нулей после ступеньки
    if Wfilt[0] == 0:  # проверка на ФНЧ
        Hp2 = np.hstack((2 * One,z22));  # расчет спектра импульсный функции фильтра              # если ФНЧ то нулей перед ступенькой нет
    else:
        z12 = np.zeros(fp2);  # расчет массива нулей до ступеньки
        Hp2 = np.hstack((z12, 2 * One, z22));
    # ==================================================================

    s = np.hstack((s[:502], np.zeros(10)))
    # s = s[:502]
    SP2_orig = np.fft.fft(s)
    SP2 = SP2_orig * Hp2[0:N2]
    SP_a2 = np.abs(SP2)



    pp = np.flatnonzero(SP_a2 == max(SP_a2))[0]  # поиск первого максимума
    fff = fs * (pp) / N  # расчет частоты первого максимума
    #for i in range(len(SP_a2)):
            #print(i,SP_a2[i])
    print 'freq      = ' + str(fff)
    print 'position  = ' + str(pp)
    print 'freq step = ' + str(fs * 1 / N)
    plt.figure()
    #plt.plot(ff, SP_a1, ff, SP_a2)
    plt.show()


############################

if __name__ == "__main__":  # Если этот скрипт выполняется как
    # независимая программа:
    main()

    sys.exit(0)  # Выход из программы.