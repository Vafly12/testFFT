# -*- coding: utf-8 -*-
"""
Created on Fri Sep 15 11:58:30 2017

@author: RonkinMV
"""
import numpy as np
import sys
import MyLIB as mL
# data,fs,prelimFreqRange,CutZB,Wcof,CutCof,NfftCoarse
# (data,fs,Wcof,CutZB,CutCof,fRange)
def InitSigTreat(data,fs,fRange,CutZB,Wcof,CutCof,NfftCoarse):    
#### функция предобработки сигнала перед проведением оценки
# data - входная выборка подлежащая обработке
# fs   - частота дискретиазции
# Wcof - коэффициенты формирования полосы точной фильратции
#     расчет по принципу Wfilt = WfiltCof+fCoarse;
#     где 
#     fCoarse  - грубая оценка частоты
#     Wfilt - полса частот фильтрации (Гц), 
#       может принимать значения
#           a     - фильтр нижних частот
#           [a,b] - полосовой фильтр
#           также надо добавить 0 - фильтр выключен    
# CutZB   - число точек в начале и в конце, которые подлежат обрезке
# CutCof  - число точек обрезки после фильратции сигнала
# значение обрезок от 0 до N - числа точек в выборке сигнала
# fRange  - диапазон поиска грубого максимуа частоты
#     возможные значения:
#       0     - диапазоно по умолчанию 
#       а     - одно значение соотвевует диапазону от 0 до а
#       [a,b] - диапзон поиску задан полностью
#    диапазон поиска не может быть вне пределов [0,fs/2]
# NfftCoarse - сейча не работает!
####
  pRange = [0,0]                # объявление массива начальной и конечной точек обрезки сигнала
  s      = data-np.mean(data)   # проверка на постоянную составляющую 
  N      = len(s)               # длина массива
  Nfft   = N                    # в перспективе это может быть входная переменная 
  flagZeroPadding = 1           # в перспективе это может быть входная переменная 
  s    = s[CutZB[0]:N-CutZB[1]] # обрезка зон орбащения ЛЧМ сигнала а массиве
  if flagZeroPadding==1:
     zeroArray= np.zeros(CutZB[0]+CutZB[1]) # возможно CutZB(1)+CutZB(1)-1 надо проверить
     s=np.hstack((s,zeroArray))             # добавление нулей
        # если Nfft не равен N возможно также следует дополнять нулями
        # также если N не степень 2 тоже возможно следует дополнять
        # нулми тут
  # проверака на предопределенный диапзон грубой оценки частоты
  # if nargin<6:
  #     fRange=0 # определение диапазона частот по умолчанию
  # проверка на ФНЧ  
  if (np.size(fRange)==1):
    if (fRange)!=0:
      fRange = [0,fRange] # ФНЧ поиск
    else:
      fRange = [0,fs/2]   # поиск во всем диапазоне
  #расчет диапазона точек фильтра    
  pRange[0] = np.fix((fRange[0]+1)*Nfft/fs) #начальная точка диапазона поиска грубой частоты 
  pRange[1] = np.fix((fRange[1]+1)*Nfft/fs) #конечная  точка диапазона поиска грубой частоты 
  # проверка на выполнимость поиска в диапазоне 
      # проверка нижней границы диапазона 
  if fRange[0]<=0:
      pRange[0]= 1
      # проверка верхней границы диапазона   
  if (fRange[1]>= fs/2):
      pRange[1] = np.fix(N/2)
  elif (fRange[1]<=fRange[0]):
      pRange[1] = np.fix(N/2)
  # выполнение алгоритма фильратции    
  fCoarse, Sp = Ml_est(s,fs,Nfft,pRange)     # грубая оценка частоты
  Wfilt = [fCoarse-Wcof[0],fCoarse+Wcof[1]]  # формирования частот среза узкополосного фильтра
      # возможно также задание в мультипликативной форме Wfilt = [fCoarse*Wcof[0],fCoarse*Wcof[1]], 
      # но сейчас не  актуально 
  Hp = MyFilterWindow(N,Wfilt,fs)              # формирование массива окна
      # окон соответствует комплексному фильтру - то есть в диапазоне [fs/2, fs] - всегда нули
  s  = MyFiltration(Sp,Hp,1)                   # выполнение фильртации, причем вход уже спектр
      # фильтрация также осуществляет преобразование Гильберта, за счет того что у окна в диапазоне [fs/2, fs] - всегда нули
  s  = s[CutCof[0]:len(s)-CutCof[1]]           # обрезка зон, связанных с эффектом Гиббса связанных с преобразование Гильберта
  if flagZeroPadding==1:
      zeroArray= np.zeros(CutCof[0]+CutCof[1]) # возможно CutZB(1)+CutZB(1)-1 надо проверить
      s=np.hstack((s,zeroArray))               # добавление нулей      
  return s, fCoarse, Wfilt

def MyFilterWindow(N,Wfilt,fs):
#### функция полосовго фильтра методом синтеза прямоугольного окна в
# частотной области  
# N - длина массива
# Wfilt=[cutOffL,cutOffH]; - частоты фильтрации (Гц)
# fs - частота дискретизации
#### 
  # порверка на тип фильтра
  if len(Wfilt)==1:
      if Wfilt==0:
          Wfilt = [0,fs/2]   # формирование окна фильтра Гильберта
      else:
          Wfilt = [0,Wfilt]  # формирование окна ФНЧ фильтра
  fp = int((Wfilt[0]/fs)*N)  # вычисление отсчета спектра соответствующего нижней частоте среза
  lp = int((Wfilt[1]/fs)*N)  # вычисление отсчета спектра соответствующего верхней частоте среза
  # проверка на выполнимость фильтра 
  if lp>N/2:    # проверка на ограничение верхней частоты            
     lp = int(N/2)    # не должна превышать половину длины спектра (fs/2)
  One   = np.ones(lp-fp); # расчет массива единичной ступеньки   
  z2    = np.zeros(N-lp);# расчет массива нулей после ступеньки 
  if Wfilt[0]==0: # проверка на ФНЧ
      Hp = np.hstack((2*One, z2));# расчет спектра импульсный функции фильтра              # если ФНЧ то нулей перед ступенькой нет  
  else:
      z1 = np.zeros(fp);# расчет массива нулей до ступеньки  
      Hp = np.hstack((z1,2*One, z2));# расчет спектра импульсный функции фильтра
  return   Hp   

def MyFiltration(s_in,Hp,FlagBPF):
#### функция фильтрации
# s_in    - входной массив фильртации
# Hp      - выборка АКФ для оконной фильтрации
# FlagBPF - флаг необходимости выполнения БПФ
#     возможные значения
#          0 - необходимо выполнить БПФ, входной массив во временной области
#          1 - входной массив уже явлется спектром 
#     следует отметить, что в данной функции БПФ выполняется по тому
#     количеству точек, которое есть во входом массиве
#     возможно необходимо добавть проверку, что в случае обрезки добивание нулями
####
  if FlagBPF ==0:
      Sp = np.fft.fft(s_in) # вычисления спектра сигнала методом БПФ
  else:
      Sp = s_in             # входной массив уже спектр
  Sp     = Sp*Hp            # выполнение фильтрации (свертка в частотной области - перемножение) 
  s_out  = np.fft.ifft(Sp)  # обратное БПФ отфильтрованного сигнала  
  return   s_out

def Ml_est(s_in,fs,Nfft,pRange):
#### функция оценки частоты по максиму спектра
# s_in  - входной сигнал
# fs      - частота дискретизации
# дополнительные параметры
# Nfft        - число точек БПФ
# fRange - диапазон поиска 
####
  Sp = np.fft.fft(s_in,Nfft) # формирование спектра 
  S  = np.abs(Sp)**2         # создание спектра АКФ
  # формирование массива поиска максимума спектра
      
      # формирование конечной части массива поиска
  if np.size(pRange)==1:
      pRange    = [pRange,int(Nfft/2)]
      #pRange[1] = int(Nfft/2)              # массив поиска достаточно огранчить половиной спектра  так как вторая половина зеркальная (для действ. выборок) или нулевая (для комплексных выборок)
  # проверка на целые числе    
  pRange[0]=int(pRange[0]) 
  pRange[1]=int(pRange[1])   
      # проверка на ФНЧ массив  
  if pRange[0]!=0:
      zr1 = np.zeros(pRange[0])  
      S   = np.hstack((zr1,S[pRange[0]:])) # фомирование начальной части массива поиска, если она не ноль
      # проверка на существование конечной точки массива поиска
  
  
  zr2   = np.zeros(Nfft-pRange[1])
  S     = np.hstack((S[:pRange[1]],zr2))   # формирование коечной части массива поиска   
  pp    = np.flatnonzero(S==max(S))        # процедура поиска максимума амплитудного спектра
  f_res = fs*(pp)/Nfft                     # расчет частоты максимума
  return  f_res[0], Sp

def main():
  fs     = float(20e3)
  
  N      = 512
  Tm     = N/fs
  fRange = [-90,6*fs/2]
  fRange = 0
  CutZB  = [5,5]
  Wcof   = [2/Tm,2/Tm]
  CutCof = [5,5]  

  
  # пример для моногармонического комплексного сигнала
  print ' М О Д Е Л Ь  С И Г Н А Л А '
  f      = 1.0e3 # частота сигнал
  data   = [np.exp(1j*(2*np.pi*n*f/fs)) for n in range(N)]  
  fres, Sp = Ml_est(data,fs,N,0)
  print 'грубая оценка Ml_est без обработки        = '+str(fres)
  print 'грубая оценка старым Ml_est без обработки = '+str(mL.Ml_est(data,fs,N))
  print 'оценка моим алгоритмом без обработки      = '+str(mL.SCFD_est(data,fs,'FitzR'))
  s, fCoarse, Wfilt = InitSigTreat(data,fs,fRange,CutZB,Wcof,CutCof,0)  
  print 'грубая оценка после обработки = %f'  % (fCoarse) 
  print 'точная оценка после обработки = %f' % mL.SCFD_est(s,fs,'FitzR')
  print ' Р Е А Л Ь Н Ы Й  С И Г Н А Л   С   О Б Р Е З К О Й '
  # пример для реального комплексного сигнала
  data =[11.962223053,93.334293366,24.852848053,51.4397621155,167.455387116,-75.8551597595,-252.295589447,-286.133480072,-214.42937851,-125.806331634,-7.37371444703,213.378238678,329.393863678,133.61749649,-52.490901947,198.876285553,82.05499649,127.977848053,-4.15105819703,-158.032894134,-48.4625816345,-152.393245697,-74.2438316345,66.747379303,95.751285553,236.74249649,190.013980866,-154.004573822,-415.845394134,-492.383480072,-3.34539413453,270.580387116,339.061832428,-117.74969101,-50.879573822,-58.936214447,6.32257461547,-0.122737884529,-143.53094101,-197.510433197,-55.713558197,26.464176178,277.831363678,518.724918366,355.175113678,106.224918366,-96.8024253845,-281.299495697,-313.526058197,-113.721370697,134.423160553,278.63702774,344.701480866,204.51593399,-117.74969101,-224.09734726,-90.3571128845,-198.31609726,-73.438167572,-147.559261322,-448.071956634,-299.829769134,242.382144928,304.41827774,196.459293366,-19.4586753845,-313.526058197,-277.271175384,-63.770198822,151.342105866,351.146793366,418.822574616,495.360660553,111.864566803,-238.599300384,-357.837581634,-180.591487884,294.75030899,285.08234024,163.427066803,-344.141292572,-50.879573822,202.098941803,217.40655899,35.3264808655,-214.42937851,-365.088558197,-440.01531601,-247.461605072,-22.6813316345,210.155582428,9.54523086547,248.021793366,20.018863678,-50.879573822,-137.08562851,-214.42937851,-2.53973007203,47.411441803,139.257144928,-13.819026947,9.54523086547,159.39874649,430.907535553,289.110660553,220.62921524,-120.97234726,-277.271175384,-93.5797691345,172.28937149,148.925113678,-62.9645347595,-110.498714447,-392.481136322,-155.615901947,256.884098053,-1.73406600953,-115.332698822,-411.817073822,-187.842464447,30.4924964905,299.584293366,359.20343399,87.694644928,-13.0133628845,-231.348323822,-328.833675384,-242.627620697,-25.098323822,149.73077774,281.054019928,315.697574616,173.095035553,176.317691803,319.725894928,335.033512116,-1.73406600953,-307.88640976,-547.974300384,-438.403987884,-33.9606285095,169.872379303,210.155582428,343.09015274,11.1565589905,-97.608089447,-104.053401947,-82.3004722595,-297.412776947,-319.165706634,-416.651058197,-93.5797691345,-19.4586753845,88.50030899,318.114566803,393.846988678,389.818668366,254.467105866,6.32257461547,40.966129303,41.7717933655,137.645816803,-151.587581634,-311.914730072,-305.469417572,-414.23406601,-185.42547226,198.07062149,406.737613678,422.045230866,248.827457428,55.468082428,-138.696956634,-303.052425384,-263.574886322,-437.598323822,-252.295589447,-103.247737885,61.913394928,345.507144928,387.401676178,239.96515274,338.256168366,339.061832428,-33.9606285095,-196.704769134,-390.869808197,-350.586605072,-279.688167572,-145.142269134,23.241519928,194.84796524,264.135074616,393.846988678,242.382144928,213.378238678,22.4358558655,-224.09734726,-371.533870697,-386.841487884,-361.865901947,-200.733089447,65.136051178,221.434879303,391.42999649,361.620426178,360.814762116,86.888980866,-58.1305503845,-145.947933197,-442.432308197,-388.45281601,-239.404964447,-199.927425384,16.796207428,326.171207428,421.239566803,427.684879303,-29.1266441345,-10.596370697,86.888980866,79.638004303,-112.915706635,-394.092464447,-282.10515976,-137.891292572,60.302066803,177.929019928,227.07452774,298.778629303,173.095035553,103.807926178,-72.6325035095,-120.166683197,-199.927425384,-239.404964447,-188.64812851,-245.044612884,-176.563167572,-79.0778160095,121.532535553,256.07843399,408.348941803,173.900699616,65.9417152405,-212.818050384,-62.158870697,-17.041683197,65.136051178,65.136051178,-84.717464447,-25.098323822,-58.1305503845,34.520816803,133.61749649,57.8850746155,-100.830745697,-42.0172691345,-196.704769134,-228.931331634,-94.385433197,-33.154964447,268.163394928,38.5491371155,40.1604652405,87.694644928,51.4397621155,1.48859024047,27.2698402405,200.487613678,148.119449616,24.852848053,-187.036800384,-340.11297226,-311.10906601,-149.97625351,-122.583675385,190.819644928,387.401676178,423.65655899,132.811832428,-38.7946128845,-225.708675384,-350.586605072,-69.4098472595,163.427066803,93.334293366,-62.158870697,-57.324886322,27.2698402405,28.075504303,121.532535553,95.751285553,-37.1832847595,-300.635433197,-252.295589447,-76.660823822,53.0510902405,302.001285553,355.98077774,216.600894928,87.694644928,-72.6325035095,-163.672542572,24.0471839905,20.8245277405,122.338199616,-126.611995697,-278.88250351,-304.66375351,-106.470394135,220.62921524,272.19171524,-29.932308197,-46.8512535095,-323.99969101,-360.254573822,-110.498714447,179.540348053,422.850894928,511.473941803,281.054019928,20.8245277405,-199.121761322,-187.036800384,-21.0700035095,34.520816803,40.1604652405,-61.3532066345,-107.276058197,-162.86687851,-155.615901947,-10.596370697,-37.1832847595,-8.17937850953,43.3831214905,32.1038246155,-152.393245697,-76.660823822,-122.583675385,-2.53973007203,224.657535553,416.405582428,455.88312149,312.474918366,99.779605866,-60.547542572,-207.98406601,-286.133480072,-132.251644134,-187.842464447,-242.627620697,72.3870277405,91.72296524,1.48859024047,-183.008480072,-279.688167572,-292.578792572,-167.700862884,78.026676178,201.29327774,339.86749649,366.454410553,438.158512116,257.689762116,284.276676178,83.666324616,63.524723053,-116.138362885,-264.380550384,-415.845394134,-515.747737884,-449.68328476,-200.733089447,216.600894928,471.99640274,380.956363678,96.556949616,-158.032894134,-253.906917572,-296.607112884,-212.012386322,3.90558242797,255.272769928,285.08234024,174.706363678,96.556949616,174.706363678,228.685855866,203.710269928,125.560855866,-31.543636322,-195.09344101,-361.865901947,-404.56609726,-406.983089447,-276.465511322,-72.6325035095,193.236637116,447.020816803,265.74640274,135.228824616,-120.166683197,-79.0778160095,-213.623714447,-133.057308197,-4.15105819703,134.423160553,288.30499649,334.227848053,294.75030899,15.184879303,11.962223053,61.913394928,-4.15105819703,-70.215511322,-90.3571128845,-247.461605072,-295.801448822,-377.173519134,-298.21844101,-249.072933197,-91.9684410095,161.010074616,422.045230866,331.810855866,3.09991836547,57.8850746155,-143.53094101,8.73956680297,-14.6246910095,161.815738678,185.985660553,288.30499649,-16.2360191345,-84.717464447,136.84015274,210.96124649,156.17609024,-25.9039878845,-188.64812851,-335.278987884,-324.805355072,-155.615901947,-77.4664878845,-88.7457847595,-170.923519134,-56.5192222595,107.83624649,68.358707428,179.540348053,200.487613678,78.83234024,-81.494808197,-98.4137535095,-116.138362885,-92.774105072,-132.251644134,-128.223323822,-48.4625816345,3.09991836547,142.479801178,290.721988678,364.843082428,380.956363678,407.54327774,246.41046524,-87.1344566345,-190.259456634,-411.817073822,-321.582698822,-284.522151947,-165.283870697,219.017887116,150.536441803,85.27765274,-25.9039878845,-170.117855072,-186.231136322,-216.040706634,-294.99578476,-179.785823822,-125.000667572,-30.7379722595,127.977848053,235.936832428,360.009098053,426.073551178,335.033512116,358.397769928,182.763004303,-25.098323822,-224.09734726,-181.397151947,-298.21844101,-301.44109726,-29.1266441345,156.17609024,154.564762116,136.84015274,87.694644928,-55.713558197,-135.474300384,-193.482112884,-269.21453476,-326.416683197,-177.368831634,-87.1344566345,-172.53484726,-170.117855072,24.0471839905,402.709293366]
  
  s, fCoarse, Wfilt = InitSigTreat(data,fs,fRange,CutZB,Wcof,CutCof,0) 
  fres, Sp = Ml_est(data,fs,N,0)
  print 'грубая оценка Ml_est без обработки        = '+str(fres)
  print 'грубая оценка старым Ml_est без обработки = '+str(mL.Ml_est(data,fs,N))
  print 'оценка моим алгоритмом без обработки      = '+str(mL.SCFD_est(data,fs,'FitzR'))
  s, fCoarse, Wfilt = InitSigTreat(data,fs,fRange,CutZB,Wcof,CutCof,0)  
  print 'грубая оценка после обработки   = %f' % (fCoarse) 
  print 'точная оценка после обработки 1 = %f' % mL.SCFD_est(s,fs,'FitzR')
  print 'точная оценка после обработки 2 = %f' % mL.Ml_est(s,fs,2**18)
  
  print ' Р Е А Л Ь Н Ы Й  С И Г Н А Л   Б Е З   О Б Р Е З К И 1 '
  # пример для реального комплексного сигнала
  data =[11.962223053,93.334293366,24.852848053,51.4397621155,167.455387116,-75.8551597595,-252.295589447,-286.133480072,-214.42937851,-125.806331634,-7.37371444703,213.378238678,329.393863678,133.61749649,-52.490901947,198.876285553,82.05499649,127.977848053,-4.15105819703,-158.032894134,-48.4625816345,-152.393245697,-74.2438316345,66.747379303,95.751285553,236.74249649,190.013980866,-154.004573822,-415.845394134,-492.383480072,-3.34539413453,270.580387116,339.061832428,-117.74969101,-50.879573822,-58.936214447,6.32257461547,-0.122737884529,-143.53094101,-197.510433197,-55.713558197,26.464176178,277.831363678,518.724918366,355.175113678,106.224918366,-96.8024253845,-281.299495697,-313.526058197,-113.721370697,134.423160553,278.63702774,344.701480866,204.51593399,-117.74969101,-224.09734726,-90.3571128845,-198.31609726,-73.438167572,-147.559261322,-448.071956634,-299.829769134,242.382144928,304.41827774,196.459293366,-19.4586753845,-313.526058197,-277.271175384,-63.770198822,151.342105866,351.146793366,418.822574616,495.360660553,111.864566803,-238.599300384,-357.837581634,-180.591487884,294.75030899,285.08234024,163.427066803,-344.141292572,-50.879573822,202.098941803,217.40655899,35.3264808655,-214.42937851,-365.088558197,-440.01531601,-247.461605072,-22.6813316345,210.155582428,9.54523086547,248.021793366,20.018863678,-50.879573822,-137.08562851,-214.42937851,-2.53973007203,47.411441803,139.257144928,-13.819026947,9.54523086547,159.39874649,430.907535553,289.110660553,220.62921524,-120.97234726,-277.271175384,-93.5797691345,172.28937149,148.925113678,-62.9645347595,-110.498714447,-392.481136322,-155.615901947,256.884098053,-1.73406600953,-115.332698822,-411.817073822,-187.842464447,30.4924964905,299.584293366,359.20343399,87.694644928,-13.0133628845,-231.348323822,-328.833675384,-242.627620697,-25.098323822,149.73077774,281.054019928,315.697574616,173.095035553,176.317691803,319.725894928,335.033512116,-1.73406600953,-307.88640976,-547.974300384,-438.403987884,-33.9606285095,169.872379303,210.155582428,343.09015274,11.1565589905,-97.608089447,-104.053401947,-82.3004722595,-297.412776947,-319.165706634,-416.651058197,-93.5797691345,-19.4586753845,88.50030899,318.114566803,393.846988678,389.818668366,254.467105866,6.32257461547,40.966129303,41.7717933655,137.645816803,-151.587581634,-311.914730072,-305.469417572,-414.23406601,-185.42547226,198.07062149,406.737613678,422.045230866,248.827457428,55.468082428,-138.696956634,-303.052425384,-263.574886322,-437.598323822,-252.295589447,-103.247737885,61.913394928,345.507144928,387.401676178,239.96515274,338.256168366,339.061832428,-33.9606285095,-196.704769134,-390.869808197,-350.586605072,-279.688167572,-145.142269134,23.241519928,194.84796524,264.135074616,393.846988678,242.382144928,213.378238678,22.4358558655,-224.09734726,-371.533870697,-386.841487884,-361.865901947,-200.733089447,65.136051178,221.434879303,391.42999649,361.620426178,360.814762116,86.888980866,-58.1305503845,-145.947933197,-442.432308197,-388.45281601,-239.404964447,-199.927425384,16.796207428,326.171207428,421.239566803,427.684879303,-29.1266441345,-10.596370697,86.888980866,79.638004303,-112.915706635,-394.092464447,-282.10515976,-137.891292572,60.302066803,177.929019928,227.07452774,298.778629303,173.095035553,103.807926178,-72.6325035095,-120.166683197,-199.927425384,-239.404964447,-188.64812851,-245.044612884,-176.563167572,-79.0778160095,121.532535553,256.07843399,408.348941803,173.900699616,65.9417152405,-212.818050384,-62.158870697,-17.041683197,65.136051178,65.136051178,-84.717464447,-25.098323822,-58.1305503845,34.520816803,133.61749649,57.8850746155,-100.830745697,-42.0172691345,-196.704769134,-228.931331634,-94.385433197,-33.154964447,268.163394928,38.5491371155,40.1604652405,87.694644928,51.4397621155,1.48859024047,27.2698402405,200.487613678,148.119449616,24.852848053,-187.036800384,-340.11297226,-311.10906601,-149.97625351,-122.583675385,190.819644928,387.401676178,423.65655899,132.811832428,-38.7946128845,-225.708675384,-350.586605072,-69.4098472595,163.427066803,93.334293366,-62.158870697,-57.324886322,27.2698402405,28.075504303,121.532535553,95.751285553,-37.1832847595,-300.635433197,-252.295589447,-76.660823822,53.0510902405,302.001285553,355.98077774,216.600894928,87.694644928,-72.6325035095,-163.672542572,24.0471839905,20.8245277405,122.338199616,-126.611995697,-278.88250351,-304.66375351,-106.470394135,220.62921524,272.19171524,-29.932308197,-46.8512535095,-323.99969101,-360.254573822,-110.498714447,179.540348053,422.850894928,511.473941803,281.054019928,20.8245277405,-199.121761322,-187.036800384,-21.0700035095,34.520816803,40.1604652405,-61.3532066345,-107.276058197,-162.86687851,-155.615901947,-10.596370697,-37.1832847595,-8.17937850953,43.3831214905,32.1038246155,-152.393245697,-76.660823822,-122.583675385,-2.53973007203,224.657535553,416.405582428,455.88312149,312.474918366,99.779605866,-60.547542572,-207.98406601,-286.133480072,-132.251644134,-187.842464447,-242.627620697,72.3870277405,91.72296524,1.48859024047,-183.008480072,-279.688167572,-292.578792572,-167.700862884,78.026676178,201.29327774,339.86749649,366.454410553,438.158512116,257.689762116,284.276676178,83.666324616,63.524723053,-116.138362885,-264.380550384,-415.845394134,-515.747737884,-449.68328476,-200.733089447,216.600894928,471.99640274,380.956363678,96.556949616,-158.032894134,-253.906917572,-296.607112884,-212.012386322,3.90558242797,255.272769928,285.08234024,174.706363678,96.556949616,174.706363678,228.685855866,203.710269928,125.560855866,-31.543636322,-195.09344101,-361.865901947,-404.56609726,-406.983089447,-276.465511322,-72.6325035095,193.236637116,447.020816803,265.74640274,135.228824616,-120.166683197,-79.0778160095,-213.623714447,-133.057308197,-4.15105819703,134.423160553,288.30499649,334.227848053,294.75030899,15.184879303,11.962223053,61.913394928,-4.15105819703,-70.215511322,-90.3571128845,-247.461605072,-295.801448822,-377.173519134,-298.21844101,-249.072933197,-91.9684410095,161.010074616,422.045230866,331.810855866,3.09991836547,57.8850746155,-143.53094101,8.73956680297,-14.6246910095,161.815738678,185.985660553,288.30499649,-16.2360191345,-84.717464447,136.84015274,210.96124649,156.17609024,-25.9039878845,-188.64812851,-335.278987884,-324.805355072,-155.615901947,-77.4664878845,-88.7457847595,-170.923519134,-56.5192222595,107.83624649,68.358707428,179.540348053,200.487613678,78.83234024,-81.494808197,-98.4137535095,-116.138362885,-92.774105072,-132.251644134,-128.223323822,-48.4625816345,3.09991836547,142.479801178,290.721988678,364.843082428,380.956363678,407.54327774,246.41046524,-87.1344566345,-190.259456634,-411.817073822,-321.582698822,-284.522151947,-165.283870697,219.017887116,150.536441803,85.27765274,-25.9039878845,-170.117855072,-186.231136322,-216.040706634,-294.99578476,-179.785823822,-125.000667572,-30.7379722595,127.977848053,235.936832428,360.009098053,426.073551178,335.033512116,358.397769928,182.763004303,-25.098323822,-224.09734726,-181.397151947,-298.21844101,-301.44109726,-29.1266441345,156.17609024,154.564762116,136.84015274,87.694644928,-55.713558197,-135.474300384,-193.482112884,-269.21453476,-326.416683197,-177.368831634,-87.1344566345,-172.53484726,-170.117855072,24.0471839905,402.709293366]
  s, fCoarse, Wfilt = InitSigTreat(data,fs,fRange,[0,0],Wcof,CutCof,0)  
  print 'грубая оценка после обработки = %f'  % (fCoarse) 
 # print 'точная оценка после обработки = %f' % mL.SCFD_est(s,fs,'FitzR') 
  print 'точная оценка после обработки 1 = %f' % mL.SCFD_est(s,fs,'FitzR')
  print 'точная оценка после обработки 2 = %f' % mL.Ml_est(s,fs,2**18)
  
  print ' Р Е А Л Ь Н Ы Й  С И Г Н А Л   Б Е З   О Б Р Е З К И 2 '
  # пример для реального комплексного сигнала
  s, fCoarse, Wfilt = InitSigTreat(data,fs,fRange,[0,0],Wcof,[0,0],0)  
  print 'грубая оценка после обработки = %f'  % (fCoarse) 
  #print 'точная оценка после обработки = %f' % mL.SCFD_est(s,fs,'FitzR')  
  print 'точная оценка после обработки 1 = %f' % mL.SCFD_est(s,fs,'FitzR')
  print 'точная оценка после обработки 2 = %f' % mL.Ml_est(s,fs,2**18)
  #print 'точная оценка после обработки 3 = %f' % Ml_est(s,fs,2**18,[0,10000])
  #print mL.SCFD_est(s,fs,'FitzR') 
  #print fCoarse
if __name__=="__main__":# Если этот скрипт выполняется как
			# независимая программа:
    main()

    sys.exit (0)	# Выход из программы.    
